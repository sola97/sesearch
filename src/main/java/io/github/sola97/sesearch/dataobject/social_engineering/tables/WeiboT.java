/*
 * This file is generated by jOOQ.
 */
package io.github.sola97.sesearch.dataobject.social_engineering.tables;


import io.github.sola97.sesearch.dataobject.social_engineering.Indexes;
import io.github.sola97.sesearch.dataobject.social_engineering.SocialEngineeringT;
import io.github.sola97.sesearch.dataobject.social_engineering.tables.records.WeiboRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WeiboT extends TableImpl<WeiboRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>social_engineering.weibo</code>
     */
    public static final WeiboT WEIBO = new WeiboT();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WeiboRecord> getRecordType() {
        return WeiboRecord.class;
    }

    /**
     * The column <code>social_engineering.weibo.phone</code>.
     */
    public final TableField<WeiboRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(13), this, "");

    /**
     * The column <code>social_engineering.weibo.uid</code>.
     */
    public final TableField<WeiboRecord, String> UID = createField(DSL.name("uid"), SQLDataType.VARCHAR(13), this, "");

    private WeiboT(Name alias, Table<WeiboRecord> aliased) {
        this(alias, aliased, null);
    }

    private WeiboT(Name alias, Table<WeiboRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>social_engineering.weibo</code> table reference
     */
    public WeiboT(String alias) {
        this(DSL.name(alias), WEIBO);
    }

    /**
     * Create an aliased <code>social_engineering.weibo</code> table reference
     */
    public WeiboT(Name alias) {
        this(alias, WEIBO);
    }

    /**
     * Create a <code>social_engineering.weibo</code> table reference
     */
    public WeiboT() {
        this(DSL.name("weibo"), null);
    }

    public <O extends Record> WeiboT(Table<O> child, ForeignKey<O, WeiboRecord> key) {
        super(child, key, WEIBO);
    }

    @Override
    public Schema getSchema() {
        return SocialEngineeringT.SOCIAL_ENGINEERING;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEIBO_PHONE, Indexes.WEIBO_UID);
    }

    @Override
    public WeiboT as(String alias) {
        return new WeiboT(DSL.name(alias), this);
    }

    @Override
    public WeiboT as(Name alias) {
        return new WeiboT(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiboT rename(String name) {
        return new WeiboT(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WeiboT rename(Name name) {
        return new WeiboT(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
